import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:io';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(
    statusBarColor: Colors.transparent, // transparent status bar
    statusBarIconBrightness: Brightness.light,
  ));

  Socket sock = await Socket.connect('192.168.4.1', 80);
  print('connected');

  // listen to the received data event stream

/*
  sock.listen((event) {
  print(String.fromCharCodes(event));
  var long2 = num.tryParse(String.fromCharCodes(event))?.toDouble();
  print("yes");
  print(long2);
  print("lol");
  });

*/

  runApp(MyApp(sock));
}

class MyApp extends StatelessWidget {
  Socket socket;

  MyApp(Socket s) {
    this.socket = s;
  }

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: ' Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.

        brightness: Brightness.dark,
        primaryColor: Colors.white,
        accentColor: Colors.cyan[600],
        // This makes the visual density adapt to the platform that you run
        // the app on. For desktop platforms, the controls will be smaller and
        // closer together (more dense) than on mobile platforms.
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: MyHomePage(
        title: 'Steuerung',
        channel: socket,
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final Socket channel;

  MyHomePage({Key key, this.title, this.channel}) : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  double _value = 175;
  var string1;

  bool switchControl = false;
  bool switchSDControl = false;
/*void _connectData()async{

  Socket sock = await Socket.connect('192.168.4.1', 80).timeout(Duration(seconds: 3), onTimeout: (){
    print('connection timed out');
    }).catchError((error)  {
    print(error);
  });


 sock.listen((event) {
  print(String.fromCharCodes(event));
  var long2 = num.tryParse(String.fromCharCodes(event))?.toDouble();
  print("yes");
  print(long2);
  print("lol");
  });
}

*/
  void _toggleTVCSwitch(bool value) {
    if (switchControl == false) {
      setState(() {
        switchControl = true;
      });
      widget.channel.write("T001\n");
      widget.channel.write("L011\n");

      print('Switch is ON');

    } else {
      setState(() {
        switchControl = false;
      });

      widget.channel.write("T000\n");
      widget.channel.write("L010\n");
      print('Switch is OFF');

    }
  }

  void _toggleSDSwitch(bool valueswitch) {
    if (switchSDControl == false) {
      setState(() {
        switchSDControl = true;
      });
      widget.channel.write("S001\n");

      print('Switch is ON');


    } else {
      setState(() {
        switchSDControl = false;
      });

      widget.channel.write("S000\n");
      print('Switch is OFF');
    }
  }

  void _toggleEDFon() {
    widget.channel.write("E001\n");
  }

  void _toggleEDFoff() {
    widget.channel.write("E000\n");
  }

  void _toggleEDFland() {
    widget.channel.write("E002\n");
  }

  void _resetIMU() {
    widget.channel.write("R001\n");
  }

  void _resetIMUGyr() {
    widget.channel.write("R002\n");
  }

  void _toggleSD() {
    widget.channel.write("S001\n");
  }

  void _toggleSendVal() {
    widget.channel.write(string1);
  }

  @override
  void dispose() {
    widget.channel.close();
    super.dispose();
  }

  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.

    return Scaffold(
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Invoke "debug painting" (press "p" in the console, choose the
          // "Toggle Debug Paint" action from the Flutter Inspector in Android
          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
          // to see the wireframe for each widget.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Container(
                padding: EdgeInsets.fromLTRB(20, 20, 20, 20),
                child: Text("TVC", style: TextStyle(fontSize: 21))),
            Switch(
              onChanged: _toggleTVCSwitch,
              value: switchControl,
              activeColor: Colors.blue,
              activeTrackColor: Colors.green,
              inactiveThumbColor: Colors.white,
              inactiveTrackColor: Colors.grey,
            ),
            Container(
                padding: EdgeInsets.fromLTRB(20, 20, 20, 20),
                child: Text("Datenlogger", style: TextStyle(fontSize: 21))),
            Switch(
              onChanged: _toggleSDSwitch,
              value: switchSDControl,
              activeColor: Colors.blue,
              activeTrackColor: Colors.green,
              inactiveThumbColor: Colors.white,
              inactiveTrackColor: Colors.grey,
            ),
            Slider(
              min: 100,
              max: 200,
              divisions: 10,
              activeColor: Colors.black,
              inactiveColor: Colors.grey,
              label: (_value - 100).toString() + "cm",
              value: _value,
              onChanged: (value) {
                setState(() {
                  _value = value;
                  print(value);
                  string1 = 'V' + value.toInt().toString() + "\n";
                  print(string1);
                });
              },
            ),
            RaisedButton(
              child: Text("HÃ¶he schicken",
                  style: TextStyle(
                      color: Colors.white,
                      fontStyle: FontStyle.italic,
                      fontSize: 20.0)),
              color: Colors.green,
              onPressed: _toggleSendVal,
            ),
            RaisedButton(
              child: Text("Reset IMU",
                  style: TextStyle(
                      color: Colors.blue,
                      fontStyle: FontStyle.italic,
                      fontSize: 20.0)),
              color: Colors.white,
              onPressed: _resetIMU,
            ),
            RaisedButton(
              child: Text("Reset Gyro",
                  style: TextStyle(
                      color: Colors.blue,
                      fontStyle: FontStyle.italic,
                      fontSize: 20.0)),
              color: Colors.white,
              onPressed: _resetIMUGyr,
            ),
            RaisedButton(
              child: Text("STARTEN",
                  style: TextStyle(
                      color: Colors.red,
                      fontStyle: FontStyle.italic,
                      fontSize: 20.0)),
              color: Colors.white,
              onPressed: _toggleEDFon,
            ),
            RaisedButton(
              child: Text("EDF OFF",
                  style: TextStyle(
                      color: Colors.red,
                      fontStyle: FontStyle.italic,
                      fontSize: 20.0)),
              color: Colors.white,
              onPressed: _toggleEDFoff,
            ),
            SizedBox(
              height: 40,
            ),
            new SizedBox(
                height: 120.0,
                width: 280.0,
                child: new FlatButton(
                  padding: new EdgeInsets.all(30.0),
                  child: Text("LANDEN",
                      style: TextStyle(
                          color: Colors.white,
                          fontStyle: FontStyle.italic,
                          fontSize: 20.0)),
                  color: Colors.red,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20.0),
                      side: BorderSide(color: Colors.red)),
                  onPressed: _toggleEDFland,
                )),
          ],
        ),
      ),
    );
  }
}
